/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package loginandsignup;

import javax.swing.*;
import java.awt.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.List;
import java.io.FileWriter;
import java.io.IOException;

/**
 * Represents a message frame for the QuickChat application.
 * This class extends JFrame to display message details.
 */
public class Message extends javax.swing.JFrame {

    String messageID;
    String recipient;
    String messageText;

    /**
     * Creates new form Message.
     *
     * @param messageNumber The sequential number of the message (e.g., 1, 2, 3...)
     * @param messageID     The unique ID of the message.
     * @param recipient     The recipient's contact number.
     * @param messageText   The content of the message.
     */
    public Message(int messageNumber, String messageID, String recipient, String messageText) {
        super("QuickChat - Message " + messageNumber); // Set frame title
        this.messageID = messageID;
        this.recipient = recipient;
        this.messageText = messageText;
        initComponents();
        displayMessageDetails(); // Call method to populate GUI
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: DO NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     *
     * I've added actual components to display the message details.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); // Close only this window, not the whole app
        setSize(400, 300); // Set a reasonable size
        setLocationRelativeTo(null); // Center the window

        JPanel mainPanel = new JPanel(new BorderLayout(10, 10)); // Add some padding
        mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Use JLabels for ID and Recipient, JTextArea for message text
        JLabel idLabel = new JLabel("Message ID: " + messageID);
        JLabel recipientLabel = new JLabel("Recipient: " + recipient);
        JTextArea messageTextArea = new JTextArea(messageText);
        messageTextArea.setEditable(false);
        messageTextArea.setLineWrap(true);
        messageTextArea.setWrapStyleWord(true);
        JScrollPane scrollPane = new JScrollPane(messageTextArea);

        JPanel topPanel = new JPanel(new GridLayout(2, 1));
        topPanel.add(idLabel);
        topPanel.add(recipientLabel);

        mainPanel.add(topPanel, BorderLayout.NORTH);
        mainPanel.add(scrollPane, BorderLayout.CENTER);

        add(mainPanel);
        pack(); // Pack components to their preferred size
    }

    /**
     * Populates the GUI components with message details.
     * (This is handled directly in initComponents now, but kept for clarity if
     * you had a separate display method in your original design)
     */
    private void displayMessageDetails() {
        // This method is primarily for conceptual clarity.
        // The initComponents method now directly uses the member variables.
        // If you had specific JLabels/JTextAreas declared as member variables,
        // you would set their text here.
    }

    /**
     * Checks if the recipient cell number is valid.
     * - Must be at most 10 characters long (excluding '+').
     * - Must start with a '+' sign.
     * - Must contain only digits after the '+' sign.
     *
     * @param recipient The recipient's cell number string.
     * @return true if the recipient number is valid, false otherwise.
     */
    public static boolean checkRecipientCell(String recipient) {
        if (recipient == null || recipient.isEmpty()) {
            return false;
        }
        // Check for '+' prefix
        if (!recipient.startsWith("+")) {
            return false;
        }
        // Check length (excluding '+')
        if (recipient.length() > 11) { // 1 for '+' + 10 digits
            return false;
        }
        // Check if remaining characters are digits
        for (int i = 1; i < recipient.length(); i++) {
            if (!Character.isDigit(recipient.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    /**
     * Generates a 10-digit random number as a String.
     *
     * @return A 10-digit random number string.
     */
    public static String generateRandom10DigitID() {
        Random random = new Random();
        long number = 1000000000L + (long)(random.nextDouble() * 9000000000L); // Ensures 10 digits
        return String.valueOf(number);
    }

    /**
     * Creates an MD5 hash of the message details (ID, recipient, text).
     *
     * @return The MD5 hash as a hexadecimal string.
     */
    public String createMessageHash() {
        try {
            String data = this.messageID + this.recipient + this.messageText;
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] hashBytes = md.digest(data.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : hashBytes) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null; // Handle error appropriately
        }
    }

    /**
     * Returns a formatted string of the message details.
     *
     * @return A string containing message ID, recipient, and text.
     */
    public String printMessageDetails() {
        return "Message ID: " + this.messageID +
               "\nRecipient: " + this.recipient +
               "\nMessage: " + this.messageText;
    }

    // --- Main method (moved to QuickChatApp) ---
    // The main method should not reside in a JFrame class for better separation of concerns.
    // It is moved to QuickChatApp.java
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
       
package loginandsignup; // Ensure this matches your package structure


public class QuickChatApp {

    // Store messages in static lists for simplicity in this example
    private static List<Message> sentMessages = new QuickChatApp.ArrayList<>();
    private static final List<Message> storedMessages = new QuickChatApp.ArrayList<>();

    // Main application entry point
    public static void main(String[] args) {
        // Welcome message
        JOptionPane.showMessageDialog(null, "Welcome to QuickChat.", "Welcome", JOptionPane.INFORMATION_MESSAGE);

        int numMessages = 0;

        // Ask for number of messages to send
        numMessages = getNumberOfMessagesFromUser();
        if (numMessages == -1) { // User cancelled initial prompt
            System.exit(0);
        }

        // Main application loop with menu
        while (true) {
            String menu = "Select an option:\n"
                        + "1) Send Messages\n"
                        + "2) Show recently sent messages\n"
                        + "3) Quit";
            String choice = JOptionPane.showInputDialog(null, menu, "QuickChat Menu", JOptionPane.QUESTION_MESSAGE);

            if (choice == null) {
                continue; // User pressed Cancel, show menu again
            }

            switch (choice) {
                case "1":
                    sendMessagesWorkflow(numMessages);
                    break;
                case "2":
                    showRecentlySentMessages();
                    break;
                case "3":
                    JOptionPane.showMessageDialog(null, "Thank you for using QuickChat. Goodbye!", "Exit", JOptionPane.INFORMATION_MESSAGE);
                    System.exit(0);
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Invalid option. Please choose 1, 2, or 3.", "Invalid Choice", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Prompts the user for the number of messages to send and validates the input.
     * @return The number of messages, or -1 if the user cancels.
     */
    private static int getNumberOfMessagesFromUser() {
        while (true) {
            String inputNumMessages = JOptionPane.showInputDialog(null, "How many messages do you want to send?", "Number of Messages", JOptionPane.QUESTION_MESSAGE);
            if (inputNumMessages == null) { // User pressed Cancel
                return -1;
            }
            try {
                int num = Integer.parseInt(inputNumMessages);
                if (num <= 0) {
                    JOptionPane.showMessageDialog(null, "Please enter a positive number.", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    return num;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid input. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Handles the workflow for sending messages.
     * @param numMessages The number of messages the user wants to send.
     */
    private static void sendMessagesWorkflow(int numMessages) {
        for (int i = 0; i < numMessages; i++) {
            String recipient = JOptionPane.showInputDialog(null, "Enter recipient number (e.g., +27123456789):", "Message " + (i + 1), JOptionPane.QUESTION_MESSAGE);
            if (recipient == null) {
                // User cancelled sending messages, break the loop
                break;
            }

            if (!Message.checkRecipientCell(recipient)) {
                JOptionPane.showMessageDialog(null, "Recipient number must be at most 10 characters (excluding '+') and start with '+' sign.", "Invalid Recipient", JOptionPane.ERROR_MESSAGE);
                i--; // Decrement i to re-ask for the same message
                continue;
            }

            String messageText = JOptionPane.showInputDialog(null, "Enter message (max 250 chars):", "Message " + (i + 1), JOptionPane.QUESTION_MESSAGE);
            if (messageText == null) {
                // User cancelled sending messages, break the loop
                break;
            }

            if (messageText.length() > 250) {
                JOptionPane.showMessageDialog(null, "Please enter a message of less than 250 characters.", "Message Too Long", JOptionPane.ERROR_MESSAGE);
                i--; // Decrement i to re-ask for the same message
                continue;
            }

            // Generate messageID (10-digit random number)
            String messageID = Message.generateRandom10DigitID();

            // Create a new Message object
            Message msg = new Message(i + 1, messageID, recipient, messageText);
            String hash = msg.createMessageHash();

            // Show message hash
            JOptionPane.showMessageDialog(null, "Message Hash: " + hash, "Message Hash", JOptionPane.INFORMATION_MESSAGE);

            // Ask user to Send, Disregard, or Store
            String[] options = {"Send Message", "Disregard Message", "Store Message to send later"};
            int option = JOptionPane.showOptionDialog(null,
                    "Choose an option for Message " + (i + 1) + ":",
                    "Send Options",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]);

            if (option == 0) { // Send
                sentMessages.add(msg);
                JOptionPane.showMessageDialog(null, "Message sent.\n\n" + msg.printMessageDetails(), "Message Sent", JOptionPane.INFORMATION_MESSAGE);
                // Display the Message JFrame
                java.awt.EventQueue.invokeLater(() -> msg.setVisible(true));
            } else if (option == 1) { // Disregard
                JOptionPane.showMessageDialog(null, "Message disregarded.", "Message Disregarded", JOptionPane.INFORMATION_MESSAGE);
            } else if (option == 2) { // Store
                storedMessages.add(msg);
                storeMessagesToJson(); // Store the message to JSON
                JOptionPane.showMessageDialog(null, "Message stored successfully.", "Message Stored", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "No option selected, message disregarded.", "No Selection", JOptionPane.WARNING_MESSAGE);
            }
        }
        JOptionPane.showMessageDialog(null, "Total messages sent so far: " + sentMessages.size(), "Summary", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Displays recently sent messages.
     */
    private static void showRecentlySentMessages() {
        if (sentMessages.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No messages have been sent yet.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        StringBuilder sb = new StringBuilder("Recently Sent Messages:\n");
        for (int i = 0; i < sentMessages.size(); i++) {
            Message msg = sentMessages.get(i);
            sb.append("\n--- Message ").append(i + 1).append(" ---\n");
            sb.append(msg.printMessageDetails());
        }
        JTextArea textArea = new JTextArea(sb.toString());
        textArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setPreferredSize(new Dimension(400, 300));
        JOptionPane.showMessageDialog(null, scrollPane, "Sent Messages", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Stores stored messages to a JSON file.
     * This method requires a JSON library (e.g., org.json).
     */
    private static void storeMessagesToJson() {
        JSONArray jsonArray = new JSONArray();
        for (Message msg : storedMessages) {
            JSONObject jsonObject = new JSONObject();
            jsonObject.put("messageID", msg.messageID); // Access fields directly or via getters
            jsonObject.put("recipient", msg.recipient);
            jsonObject.put("messageText", msg.messageText);
            jsonObject.put("hash", msg.createMessageHash()); // Store hash as well
            jsonArray.put(jsonObject);
        }

     
        // This catch block handles potential errors during file writing
        // Print the stack trace for debugging purposes
        }

    private static class ArrayList {

        public ArrayList() {
        }
    }

    private static class JSONArray {

        public JSONArray() {
        }

        private void put(JSONObject jsonObject) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }
    }

    private static class JSONObject {

        public JSONObject() {
        }

        private void put(String messageID, String messageID0) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }
    }

    private static class FileWriter {

        public FileWriter() {
        }

        private FileWriter(String stored_messagesjson) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }
    }

    private static class IOException {

        public IOException() {
        }

        private void printStackTrace() {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        private String getMessage() {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

